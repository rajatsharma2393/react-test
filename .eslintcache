[{"/Users/rajatsharma/Documents/Code/Practice/React/react-test/src/index.js":"1","/Users/rajatsharma/Documents/Code/Practice/React/react-test/src/App.js":"2","/Users/rajatsharma/Documents/Code/Practice/React/react-test/src/reportWebVitals.js":"3","/Users/rajatsharma/Documents/Code/Practice/React/react-test/src/components/visitor.js":"4","/Users/rajatsharma/Documents/Code/Practice/React/react-test/src/components/admin/home.js":"5","/Users/rajatsharma/Documents/Code/Practice/React/react-test/src/components/admin/login.js":"6","/Users/rajatsharma/Documents/Code/Practice/React/react-test/src/common/constants.js":"7"},{"size":500,"mtime":1606912578655,"results":"8","hashOfConfig":"9"},{"size":1247,"mtime":1607168203648,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1606912578657,"results":"11","hashOfConfig":"9"},{"size":8343,"mtime":1607168829293,"results":"12","hashOfConfig":"9"},{"size":4298,"mtime":1607173246950,"results":"13","hashOfConfig":"9"},{"size":5103,"mtime":1607172638981,"results":"14","hashOfConfig":"9"},{"size":163,"mtime":1607172871736,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"14so6m",{"filePath":"19","messages":"20","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"18"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"18"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/rajatsharma/Documents/Code/Practice/React/react-test/src/index.js",[],["33","34"],"/Users/rajatsharma/Documents/Code/Practice/React/react-test/src/App.js",["35","36","37"],"import logo from './logo.svg';\nimport React, { Component } from 'react'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport {Redirect} from \"react-router\";\n\nimport jwt_decode from \"jwt-decode\";\nimport './App.css';\nimport VisitorRegistration from \"./components/visitor\";\nimport AdminHome from \"./components/admin/home\";\nimport AdminLogin from \"./components/admin/login\";\n\n\n  \nexport default class App extends Component {\n\n  checkAdminLogin = ()=> {\n      console.log(\"CHecking checkAdminLogin\");\n      let token = localStorage.getItem(\"user-token\");\n      if(!token) {\n          return false;\n      }\n\n      let decoded = jwt_decode(token);\n      console.log(decoded);\n      if(decoded.loggedIn) {\n      // if(decoded.loggedIn && decoded.exp >= Date.now()) {\n          return true;\n      }\n      return false;\n\n  }\n  render() {\n\n  return (\n    <Router>\n\n      <Switch>\n        <Route exact path=\"/admin\" component={() => <AdminHome checkAdminLogin={this.checkAdminLogin} />} />\n        <Route exact path=\"/admin-login\" component={() => <AdminLogin checkAdminLogin={this.checkAdminLogin} />} />\n        <Route path=\"/\" component={VisitorRegistration} />\n        \n      </Switch>\n    </Router>\n\n  );\n  }\n}\n","/Users/rajatsharma/Documents/Code/Practice/React/react-test/src/reportWebVitals.js",[],"/Users/rajatsharma/Documents/Code/Practice/React/react-test/src/components/visitor.js",["38","39","40","41","42","43","44"],"import React, { Component } from 'react';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Link from '@material-ui/core/Link';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport \"./../assets/styles/visitorDetails.css\"\n\nexport default class VisitorRegistration extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            firstName: \"\",\n            lastName: \"\",\n            email: \"\",\n            phoneNo: \"\",\n            visitDate: \"\",\n            visitTime: \"\",\n            errors: {}\n        }\n    }\n    adminBtnClick = () => {\n        this.props.history.push(\"/admin\");\n    }\n\n    valueOnChange = ({ target }) => {\n        let { name, value } = target;\n        let errors = this.state.errors;\n        errors[name] = \"\";\n        this.setState({\n            [name]: value,\n            errors\n        })\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        let errors = {};\n        let { firstName,\n            lastName,\n            email,\n            phoneNo,\n            visitDate,\n            visitTime } = this.state;\n\n        if (!firstName) {\n            errors.firstName = \"Field cant be empty\";\n        }\n        if (!lastName) {\n            errors.lastName = \"Field cant be empty\";\n        }\n        if (!email) {\n            errors.email = \"Field cant be empty\";\n        }\n        if (!phoneNo) {\n            errors.phoneNo = \"Field cant be empty\";\n        }\n        if (!visitDate) {\n            errors.visitDate = \"Field cant be empty\";\n        }\n        if (!visitTime) {\n            errors.visitTime = \"Field cant be empty\";\n        }\n        if (Object.keys(errors).length) {\n            this.setState({\n                errors\n            })\n            return;\n        }\n    }\n    render() {\n        return (\n            <div>\n                <div className=\"adminBtn\">\n                    <Button\n                        onClick={this.adminBtnClick}\n                        fullWidth\n                        variant=\"contained\"\n                        color=\"primary\"\n\n                    >\n                        Admin</Button>\n                </div>\n                <Container component=\"div\" className=\"visitorDetails main-content\" maxWidth=\"xs\">\n                    <Typography component=\"h1\" variant=\"h4\">\n                        Welcome to Challa-ahoy\n                </Typography>\n                    <br />\n                    <Typography component=\"h1\" variant=\"h5\">\n                        Visitor Details\n                    </Typography>\n                    <div>\n\n\n                        <form noValidate onSubmit={this.handleSubmit}>\n                            <Grid container spacing={2}>\n                                <Grid item xs={12} sm={6}>\n                                    <TextField\n                                        name=\"firstName\"\n                                        variant=\"outlined\"\n                                        required\n                                        fullWidth\n                                        label=\"First Name\"\n                                        autoFocus\n                                        value={this.state.firstName}\n                                        onChange={this.valueOnChange}\n                                    />\n                                    {this.state.errors.firstName && (<span className=\"error\">{this.state.errors.firstName}</span>)}\n                                </Grid>\n                                <Grid item xs={12} sm={6}>\n                                    <TextField\n                                        variant=\"outlined\"\n                                        required\n                                        fullWidth\n                                        label=\"Last Name\"\n                                        name=\"lastName\"\n                                        value={this.state.lastName}\n                                        onChange={this.valueOnChange}\n                                    />\n                                    {this.state.errors.lastName && (<span className=\"error\">{this.state.errors.lastName}</span>)}\n                                </Grid>\n                                <Grid item xs={12}>\n                                    <TextField\n                                        variant=\"outlined\"\n                                        required\n                                        fullWidth\n                                        label=\"Email Address\"\n                                        name=\"email\"\n                                        value={this.state.email}\n                                        onChange={this.valueOnChange}\n                                    />\n                                    {this.state.errors.email && (<span className=\"error\">{this.state.errors.email}</span>)}\n                                </Grid>\n                                <Grid item xs={12}>\n                                    <TextField\n                                        variant=\"outlined\"\n                                        required\n                                        fullWidth\n                                        name=\"phoneNo\"\n                                        label=\"Phone Number\"\n                                        type=\"number\"\n                                        value={this.state.phoneNo}\n                                        onChange={this.valueOnChange}\n                                    />\n                                    {this.state.errors.phoneNo && (<span className=\"error\">{this.state.errors.phoneNo}</span>)}\n                                </Grid>\n                                <Grid item xs={12} sm={6}>\n                                    <TextField\n                                        InputLabelProps={{ shrink: true }}\n                                        variant=\"outlined\"\n                                        required\n                                        fullWidth\n                                        name=\"visitDate\"\n                                        label=\"Date\"\n                                        type=\"date\"\n                                        value={this.state.visitDate}\n                                        onChange={this.valueOnChange}\n                                    />\n                                    {this.state.errors.visitDate && (<span className=\"error\">{this.state.errors.visitDate}</span>)}\n                                </Grid>\n                                <Grid item xs={12} sm={6}>\n                                    <TextField\n                                        InputLabelProps={{ shrink: true }}\n                                        variant=\"outlined\"\n                                        required\n                                        fullWidth\n                                        name=\"visitTime\"\n                                        label=\"Time\"\n                                        type=\"time\"\n                                        value={this.state.time}\n                                        onChange={this.valueOnChange}\n                                    />\n                                    {this.state.errors.visitTime && (<span className=\"error\">{this.state.errors.visitTime}</span>)}\n                                </Grid>\n                            </Grid>\n                            <Button\n                                type=\"submit\"\n                                fullWidth\n                                variant=\"contained\"\n                                color=\"primary\"\n\n                            >\n                                Submit\n                        </Button>\n\n                        </form>\n                    </div>\n\n                </Container>\n            </div>\n        );\n    }\n}\n\n","/Users/rajatsharma/Documents/Code/Practice/React/react-test/src/components/admin/home.js",[],"/Users/rajatsharma/Documents/Code/Practice/React/react-test/src/components/admin/login.js",["45","46"],"/Users/rajatsharma/Documents/Code/Practice/React/react-test/src/common/constants.js",[],{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","severity":1,"message":"52","line":1,"column":8,"nodeType":"53","messageId":"54","endLine":1,"endColumn":12},{"ruleId":"51","severity":1,"message":"55","line":7,"column":3,"nodeType":"53","messageId":"54","endLine":7,"endColumn":7},{"ruleId":"51","severity":1,"message":"56","line":9,"column":9,"nodeType":"53","messageId":"54","endLine":9,"endColumn":17},{"ruleId":"51","severity":1,"message":"57","line":2,"column":8,"nodeType":"53","messageId":"54","endLine":2,"endColumn":14},{"ruleId":"51","severity":1,"message":"58","line":4,"column":8,"nodeType":"53","messageId":"54","endLine":4,"endColumn":19},{"ruleId":"51","severity":1,"message":"59","line":6,"column":8,"nodeType":"53","messageId":"54","endLine":6,"endColumn":24},{"ruleId":"51","severity":1,"message":"60","line":7,"column":8,"nodeType":"53","messageId":"54","endLine":7,"endColumn":16},{"ruleId":"51","severity":1,"message":"55","line":8,"column":8,"nodeType":"53","messageId":"54","endLine":8,"endColumn":12},{"ruleId":"51","severity":1,"message":"61","line":10,"column":8,"nodeType":"53","messageId":"54","endLine":10,"endColumn":11},{"ruleId":"51","severity":1,"message":"62","line":12,"column":10,"nodeType":"53","messageId":"54","endLine":12,"endColumn":20},{"ruleId":"51","severity":1,"message":"60","line":4,"column":8,"nodeType":"53","messageId":"54","endLine":4,"endColumn":16},{"ruleId":"63","severity":1,"message":"64","line":57,"column":26,"nodeType":"65","messageId":"66","endLine":57,"endColumn":28},"no-native-reassign",["67"],"no-negated-in-lhs",["68"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'Redirect' is defined but never used.","'Avatar' is defined but never used.","'CssBaseline' is defined but never used.","'FormControlLabel' is defined but never used.","'Checkbox' is defined but never used.","'Box' is defined but never used.","'makeStyles' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]